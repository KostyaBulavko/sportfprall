# document_block.py 

import os
import tkinter.messagebox as messagebox
import customtkinter as ctk
from tkinter import filedialog

from globals import EXAMPLES, document_blocks
from gui_utils import bind_entry_shortcuts, create_context_menu
from custom_widgets import CustomEntry
from text_utils import number_to_ukrainian_text
from data_persistence import get_template_memory, load_memory
from state_manager import save_current_state
from event_common_fields import fill_common_fields_for_new_contract, COMMON_FIELDS
from generation import enhanced_extract_placeholders_from_word

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—Å–æ–∑–¥–∞—é—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)
global_event_fields = {}
global_event_frame = None


def create_global_event_fields(parent_frame, tabview):
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –±–µ–∑ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    global global_event_fields, global_event_frame

    # –ï—Å–ª–∏ –ø–æ–ª—è —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–∏, –Ω–µ —Å–æ–∑–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
    current_tab = tabview.get()
    if current_tab in global_event_fields:
        return global_event_fields[current_tab]

    # –°–æ–∑–¥–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ –ø–æ–ª—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω–∞—Ö
    event_fields_data = [
        ("–∑–∞—Ö—ñ–¥", "–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"),
        ("–¥–∞—Ç–∞", "–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"),
        ("–∞–¥—Ä–µ—Å–∞", "–ê–¥—Ä–µ—Å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    ]

    current_event_entries = {}
    general_memory = load_memory()

    # –°–æ–∑–¥–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ entry-–ø–æ–ª—è (–æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è)
    for field_key, description in event_fields_data:
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        entry = CustomEntry(parent_frame, field_name=field_key, examples_dict=EXAMPLES)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        saved_value = general_memory.get(field_key)
        if saved_value:
            entry.set_text(saved_value)

        current_event_entries[field_key] = entry

        # –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ (–Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ pack/grid)
        entry.pack_forget()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
    if current_tab not in global_event_fields:
        global_event_fields[current_tab] = {}

    global_event_fields[current_tab] = current_event_entries
    global_event_frame = None  # –ù–µ—Ç –≤–∏–¥–∏–º–æ–≥–æ —Ñ—Ä–µ–π–º–∞

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—â–∏–µ –ø–æ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    fill_common_fields_for_new_contract(current_tab, current_event_entries)

    return current_event_entries


def get_global_event_fields(tab_name):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏"""
    return global_event_fields.get(tab_name, {})


def create_document_fields_block(parent_frame, tabview=None, template_path=None):
    if not tabview:
        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "TabView –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∏–π")
        return

    if not template_path:
        template_path = filedialog.askopenfilename(
            title="–û–±–µ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω –¥–æ–≥–æ–≤–æ—Ä—É",
            filetypes=[("Word Documents", "*.docm *.docx")]
        )
        if not template_path:
            return

    try:
        dynamic_fields = enhanced_extract_placeholders_from_word(template_path)
        # print(f"[DEBUG] –ó–Ω–∞–π–¥–µ–Ω—ñ –ø–æ–ª—è –≤ —à–∞–±–ª–æ–Ω—ñ {os.path.basename(template_path)}: {dynamic_fields}")

        if not dynamic_fields:
            messagebox.showwarning("–£–≤–∞–≥–∞",
                                   f"–£ —à–∞–±–ª–æ–Ω—ñ {os.path.basename(template_path)} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ —Ç–∏–ø—É <–ø–æ–ª–µ>.\n"
                                   "–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —É —à–∞–±–ª–æ–Ω—ñ —î –ø–æ–ª—è —É —Ñ–æ—Ä–º–∞—Ç—ñ <–Ω–∞–∑–≤–∞_–ø–æ–ª—è>")
            return

    except Exception as e:
        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —à–∞–±–ª–æ–Ω:\n{e}")
        return

    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    global_entries = create_global_event_fields(parent_frame, tabview)

    # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ –¥–ª—è –ø–æ–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞
    block_frame = ctk.CTkFrame(parent_frame, border_width=1, border_color="gray70")
    block_frame.pack(pady=10, padx=5, fill="x")

    header_frame = ctk.CTkFrame(block_frame, fg_color="transparent")
    header_frame.pack(fill="x", padx=5, pady=(5, 0))

    path_label = ctk.CTkLabel(header_frame,
                              text=f"–®–∞–±–ª–æ–Ω: {os.path.basename(template_path)} ({len(dynamic_fields)} –ø–æ–ª—ñ–≤)",
                              text_color="blue", anchor="w", wraplength=800)
    path_label.pack(side="left", padx=(0, 5), expand=True, fill="x")

    current_block_entries = {}
    template_specific_memory = get_template_memory(template_path)
    general_memory = load_memory()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞ (–∏—Å–∫–ª—é—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)
    global_event_field_names = ["–∑–∞—Ö—ñ–¥", "–¥–∞—Ç–∞", "–∞–¥—Ä–µ—Å–∞"]
    contract_fields = [field for field in dynamic_fields if field not in global_event_field_names]

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—â–∏–µ –ø–æ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ —à–∞–±–ª–æ–Ω–µ)
    template_common_fields = [field for field in contract_fields if field in COMMON_FIELDS]

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
    main_context_menu = create_context_menu(block_frame)

    # –ë–õ–û–ö –û–ë–©–ò–• –ü–û–õ–ï–ô –î–û–ì–û–í–û–†–ê (–∫—Ä–æ–º–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)
    if template_common_fields:
        common_data_frame = ctk.CTkFrame(block_frame)
        common_data_frame.pack(fill="x", padx=5, pady=5)

        common_label = ctk.CTkLabel(common_data_frame, text="üìã –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä–∞",
                                    font=("Arial", 14, "bold"), text_color="#FF6B35")
        common_label.pack(pady=(10, 5))

        common_grid_frame = ctk.CTkFrame(common_data_frame, fg_color="transparent")
        common_grid_frame.pack(fill="x", padx=10, pady=(0, 10))

        for i, field_key in enumerate(template_common_fields):
            label = ctk.CTkLabel(common_grid_frame, text=f"<{field_key}>", anchor="w", width=140,
                                 font=("Arial", 12, "bold"), text_color="#FF6B35")
            label.grid(row=i, column=0, padx=5, pady=3, sticky="w")

            entry = CustomEntry(common_grid_frame, field_name=field_key, examples_dict=EXAMPLES)
            entry.grid(row=i, column=1, padx=5, pady=3, sticky="ew")
            common_grid_frame.columnconfigure(1, weight=1)

            saved_value = template_specific_memory.get(field_key, general_memory.get(field_key))
            if saved_value is not None:
                entry.set_text(saved_value)

            bind_entry_shortcuts(entry, main_context_menu)
            current_block_entries[field_key] = entry

            hint_text = EXAMPLES.get(field_key, f"–û–±—â–µ–µ –ø–æ–ª–µ –¥–æ–≥–æ–≤–æ—Ä–∞: {field_key}")
            hint_button = ctk.CTkButton(common_grid_frame, text="‚Ñπ", width=28, height=28, font=("Arial", 14),
                                        command=lambda h=hint_text, f=field_key:
                                        messagebox.showinfo(f"–ü—ñ–¥–∫–∞–∑–∫–∞ –¥–ª—è <{f}>", h))
            hint_button.grid(row=i, column=2, padx=(0, 5), pady=3, sticky="e")

    # –ë–õ–û–ö –°–ü–ï–¶–ò–§–ò–ß–ï–°–ö–ò–• –ü–û–õ–ï–ô –î–û–ì–û–í–û–†–ê
    fields_grid_frame = ctk.CTkFrame(block_frame, fg_color="transparent")
    fields_grid_frame.pack(fill="both", expand=True, padx=5, pady=5)

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞
    specific_contract_fields = [field for field in contract_fields if field not in COMMON_FIELDS]

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
    priority_fields = [
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ/—É—Å–ª—É–≥–µ
        "—Ç–æ–≤–∞—Ä","–¥–∫", "–Ω–∞–∑–≤–∞", "–Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è", "–ø—Ä–µ–¥–º–µ—Ç", "–ø–æ—Å–ª—É–≥–∞", "—Ä–æ–±–æ—Ç–∞", "–º–∞—Ç–µ—Ä—ñ–∞–ª",

        # –ù–î–° –∏ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–µ
        "–ø–¥–≤", "–Ω–¥—Å", "–ø–æ–¥–∞—Ç–æ–∫", "–±–µ–∑ –ø–¥–≤", "–∑ –ø–¥–≤", "–≤–∫–ª—é—á–∞—é—á–∏ –ø–¥–≤",

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        "–∫—ñ–ª—å–∫—ñ—Å—Ç—å", "–æ–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—É", "–æ–¥", "—à—Ç", "–∫–≥", "–º", "–º2", "–º3",

        # –¶–µ–Ω—ã –∏ —Ä–∞—Å—á–µ—Ç—ã
        "—Ü—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é", "—Ü—ñ–Ω–∞", "–≤–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞ –æ–¥–∏–Ω–∏—Ü—é", "–≤–∞—Ä—Ç—ñ—Å—Ç—å –æ–¥–∏–Ω–∏—Ü—ñ",
        "—Å—É–º–∞", "—Å—É–º–∞ –ø—Ä–æ–ø–∏—Å–æ–º",
        "–∑–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞", "–∑–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å", "—Ä–∞–∑–æ–º", "–≤—Å—å–æ–≥–æ",

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–ª—è
        "–∑–Ω–∏–∂–∫–∞", "–∞–≤–∞–Ω—Å", "–¥–æ–ø–ª–∞—Ç–∞", "–∑–∞–ª–∏—à–æ–∫"
    ]

    # –°–æ–∑–¥–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π
    sorted_fields = []
    remaining_fields = specific_contract_fields.copy()  # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞

    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    for priority_field in priority_fields:
        if priority_field in remaining_fields:
            sorted_fields.append(priority_field)
            remaining_fields.remove(priority_field)

    # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–ª—è –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    sorted_fields.extend(sorted(remaining_fields))

    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    # print(f"[DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π: {len(sorted_fields)}")
    # print(f"[DEBUG] –ü–æ—Ä—è–¥–æ–∫ –ø–æ–ª–µ–π –¥–æ–≥–æ–≤–æ—Ä–∞: {sorted_fields}")

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    for i, field_key in enumerate(sorted_fields):
        label = ctk.CTkLabel(fields_grid_frame, text=f"<{field_key}>", anchor="w", width=140,
                             font=("Arial", 12))
        label.grid(row=i, column=0, padx=5, pady=3, sticky="w")

        entry = CustomEntry(fields_grid_frame, field_name=field_key, examples_dict=EXAMPLES)
        entry.grid(row=i, column=1, padx=5, pady=3, sticky="ew")
        fields_grid_frame.columnconfigure(1, weight=1)

        saved_value = template_specific_memory.get(field_key, general_memory.get(field_key))
        if saved_value is not None:
            entry.set_text(saved_value)

        bind_entry_shortcuts(entry, main_context_menu)
        current_block_entries[field_key] = entry

        hint_text = EXAMPLES.get(field_key, f"–ü–æ–ª–µ –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è: {field_key}")
        hint_button = ctk.CTkButton(fields_grid_frame, text="‚Ñπ", width=28, height=28, font=("Arial", 14),
                                    command=lambda h=hint_text, f=field_key:
                                    messagebox.showinfo(f"–ü—ñ–¥–∫–∞–∑–∫–∞ –¥–ª—è <{f}>", h))
        hint_button.grid(row=i, column=2, padx=(0, 5), pady=3, sticky="e")


    # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –†–ê–°–ß–ï–¢–´ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    def on_sum_or_qty_price_change(event=None):
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        def delayed_calculation():
            try:
                # –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
                qty = 0
                if "–∫—ñ–ª—å–∫—ñ—Å—Ç—å" in current_block_entries:
                    qty_text = current_block_entries["–∫—ñ–ª—å–∫—ñ—Å—Ç—å"].get().replace(",", ".").strip()
                    qty = float(qty_text) if qty_text else 0

                # –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è —Ü—ñ–Ω–∏
                price = 0
                if "—Ü—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é" in current_block_entries:
                    price_text = current_block_entries["—Ü—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é"].get().replace(",", ".").strip()
                    price = float(price_text) if price_text else 0

                total = qty * price

                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª—è "—Ä–∞–∑–æ–º"
                if "—Ä–∞–∑–æ–º" in current_block_entries:
                    entry = current_block_entries["—Ä–∞–∑–æ–º"]
                    entry.configure(state="normal")
                    entry.set_text(f"{total:.2f}")
                    entry.configure(state="readonly")

                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª—è "–∑–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞"
                if "–∑–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞" in current_block_entries:
                    entry = current_block_entries["–∑–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞"]
                    entry.configure(state="normal")
                    entry.set_text(f"{total:.2f}")
                    entry.configure(state="readonly")

                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª—è "—Å—É–º–∞" - –ò–°–ü–†–ê–í–õ–ï–ù–û
                if "—Å—É–º–∞" in current_block_entries:
                    sum_entry = current_block_entries["—Å—É–º–∞"]
                    # –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–ª—è –∑–∞–ø–∏—Å–∏
                    sum_entry.configure(state="normal")
                    if total > 0:
                        formatted_sum = f"{int(total)} –≥—Ä–Ω {int((total - int(total)) * 100):02d} –∫–æ–ø."
                        sum_entry.set_text(formatted_sum)
                    else:
                        sum_entry.set_text("")
                    # –°—Ä–∞–∑—É –±–ª–æ–∫–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                    sum_entry.configure(state="readonly")

                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª—è "—Å—É–º–∞ –ø—Ä–æ–ø–∏—Å–æ–º"
                if "—Å—É–º–∞ –ø—Ä–æ–ø–∏—Å–æ–º" in current_block_entries:
                    entry = current_block_entries["—Å—É–º–∞ –ø—Ä–æ–ø–∏—Å–æ–º"]
                    entry.configure(state="normal")
                    if total > 0:
                        entry.set_text(number_to_ukrainian_text(total).capitalize())
                    else:
                        entry.set_text("")
                    entry.configure(state="readonly")

            except ValueError as e:
                print(f"[DEBUG] –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —á–∏—Å–ª–∞: {e}")
            except Exception as e:
                print(f"[DEBUG] –ü–æ–º–∏–ª–∫–∞ –≤ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∞—Ö: {e}")

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 50ms –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if event and event.widget:
            event.widget.after(50, delayed_calculation)
        else:
            delayed_calculation()

    # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–û
    def format_price_field(event=None):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É—î –ø–æ–ª–µ '—Ü—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é' –¥–æ —Ñ–æ—Ä–º–∞—Ç—É 0.00"""
        if "—Ü—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é" not in current_block_entries:
            return

        try:
            price_entry = current_block_entries["—Ü—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é"]
            price_text = price_entry.get().replace(",", ".").strip()

            if price_text and price_text != "":
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –≤–∞–ª—ñ–¥–Ω–µ —á–∏—Å–ª–æ
                price_value = float(price_text)
                # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–æ –¥–≤–æ—Ö –¥–µ—Å—è—Ç–∫–æ–≤–∏—Ö –∑–Ω–∞–∫—ñ–≤
                formatted_price = f"{price_value:.2f}"
                price_entry.set_text(formatted_price)
                # –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç—ã –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                on_sum_or_qty_price_change()
        except ValueError:
            # –Ø–∫—â–æ –Ω–µ –≤–¥–∞—î—Ç—å—Å—è –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ - –∑–∞–ª–∏—à–∞—î–º–æ —è–∫ —î
            pass

    # –ü–†–ò–í'–Ø–ó–ö–ò –ü–û–î–Ü–ô –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–û
    if "–∫—ñ–ª—å–∫—ñ—Å—Ç—å" in current_block_entries:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏ KeyRelease –∏ FocusOut –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        current_block_entries["–∫—ñ–ª—å–∫—ñ—Å—Ç—å"].bind("<KeyRelease>", on_sum_or_qty_price_change, add="+")
        current_block_entries["–∫—ñ–ª—å–∫—ñ—Å—Ç—å"].bind("<FocusOut>", on_sum_or_qty_price_change, add="+")

    if "—Ü—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é" in current_block_entries:
        # –î–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º KeyRelease
        current_block_entries["—Ü—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é"].bind("<KeyRelease>", on_sum_or_qty_price_change, add="+")
        # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ - FocusOut
        current_block_entries["—Ü—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é"].bind("<FocusOut>",
                                                      lambda e: [format_price_field(e)],
                                                      add="+")

    # –†–æ–±–∏–º–æ readonly –ø–æ–ª—è, —è–∫—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—á–∏—Å–ª—é—é—Ç—å—Å—è - –ò–°–ü–†–ê–í–õ–ï–ù–û
    readonly_fields = ["—Å—É–º–∞ –ø—Ä–æ–ø–∏—Å–æ–º", "—Ä–∞–∑–æ–º", "–∑–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞", "—Å—É–º–∞"]  # –í–µ—Ä–Ω—É–ª–∏ "—Å—É–º–∞" –≤ readonly
    for key in readonly_fields:
        if key in current_block_entries:
            current_block_entries[key].configure(state="readonly")
            # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ–∫—É—Å —Ç–∞–±–æ–º
            current_block_entries[key].configure(takefocus=False)
            # –°–µ—Ä—ã–π —Ñ–æ–Ω –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω—è–µ–º—ã—Ö –ø–æ–ª–µ–π
            current_block_entries[key].configure(fg_color=("gray90", "gray20"))

    # –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
    on_sum_or_qty_price_change()

    # –ü–ê–ù–ï–õ–¨ –î–ï–ô–°–¢–í–ò–ô –î–õ–Ø –ë–õ–û–ö–ê
    block_actions_frame = ctk.CTkFrame(block_frame, fg_color="transparent")
    block_actions_frame.pack(fill="x", padx=5, pady=5)

    def clear_block_fields():
        if messagebox.askokcancel("–û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ª—è", "–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –ø–æ–ª—è —Ü—å–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä—É?"):
            for field_key, entry in current_block_entries.items():
                # –ù–µ –æ—á–∏—â–∞–µ–º –æ–±—â–∏–µ –ø–æ–ª—è
                if field_key not in COMMON_FIELDS:
                    entry.configure(state="normal")
                    entry.set_text("")
            on_sum_or_qty_price_change()

    def replace_block_template():
        new_path = filedialog.askopenfilename(
            title="–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —à–∞–±–ª–æ–Ω",
            filetypes=[("Word Documents", "*.docm *.docx")]
        )
        if new_path:
            try:
                new_placeholders = enhanced_extract_placeholders_from_word(new_path)
                if not new_placeholders:
                    messagebox.showwarning("–£–≤–∞–≥–∞", "–£ –Ω–æ–≤–æ–º—É —à–∞–±–ª–æ–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ñ–≤!")
                    return

                path_label.configure(text=f"–®–∞–±–ª–æ–Ω: {os.path.basename(new_path)} ({len(new_placeholders)} –ø–æ–ª—ñ–≤)")
                messagebox.showinfo("–£–≤–∞–≥–∞", "–©–æ–± –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–π —à–∞–±–ª–æ–Ω, –≤–∏–¥–∞–ª—ñ—Ç—å –±–ª–æ–∫ —ñ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π.")
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –Ω–æ–≤–∏–π —à–∞–±–ª–æ–Ω:\n{e}")

    def remove_this_block():
        if messagebox.askokcancel("–í–∏–¥–∞–ª–∏—Ç–∏", "–í–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –±–ª–æ–∫ –¥–æ–≥–æ–≤–æ—Ä—É?"):
            if block_dict in document_blocks:
                document_blocks.remove(block_dict)
            block_frame.destroy()
            save_current_state(document_blocks, tabview)

    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    ctk.CTkButton(block_actions_frame, text="üßπ –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ª—è", command=clear_block_fields).pack(side="left", padx=3)
    ctk.CTkButton(block_actions_frame, text="üîÑ –ó–∞–º—ñ–Ω–∏—Ç–∏ —à–∞–±–ª–æ–Ω", command=replace_block_template).pack(side="left",
                                                                                                      padx=3)

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –æ –ø–æ–ª—è—Ö
    fields_list = sorted(list(dynamic_fields))
    info_text = f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(dynamic_fields)} –ø–æ–ª—ñ–≤: " + ", ".join(fields_list[:3])
    if len(dynamic_fields) > 3:
        info_text += f" —Ç–∞ —â–µ {len(dynamic_fields) - 3}..."

    info_label = ctk.CTkLabel(block_actions_frame, text=info_text, text_color="gray60", font=("Arial", 10))
    info_label.pack(side="left", padx=10)

    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ö–µ–¥–µ—Ä–µ
    remove_button = ctk.CTkButton(header_frame, text="üóë", width=28, height=28, fg_color="gray50", hover_color="gray40",
                                  command=remove_this_block)
    remove_button.pack(side="right", padx=(5, 0))

    # –°–û–•–†–ê–ù–ï–ù–ò–ï –ë–õ–û–ö–ê
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –ø–æ–ª—è–º–∏ –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    all_entries = {}
    all_entries.update(global_entries)  # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
    all_entries.update(current_block_entries)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞



    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    current_tab_name = tabview.get()
    event_number = None

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –≤–∫–ª–∞–¥–∫–∏
    if current_tab_name:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –≤–∫–ª–∞–¥–∫–∏
            for tab_name, tab_obj in tabview._tab_dict.items():
                if tab_name == current_tab_name:
                    event_number = getattr(tab_obj, 'event_number', None)
                    break

            print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω event_number –¥–ª—è '{current_tab_name}': {event_number}")
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è event_number: {e}")
            event_number = None


    #print(f"[DEBUG] –°–æ–∑–¥–∞–µ—Ç—Å—è –±–ª–æ–∫ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏: {current_tab_name}")
    block_dict = {
        "path": template_path,
        "entries": all_entries,  # –í—Å–µ –ø–æ–ª—è (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ + –¥–æ–≥–æ–≤–æ—Ä–∞)
        "contract_entries": current_block_entries,  # –¢–æ–ª—å–∫–æ –ø–æ–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞
        "frame": block_frame,
        "tab_name": current_tab_name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–º—è –≤–∫–ª–∞–¥–∫–∏
        "event_number": event_number,  # –Ω–æ–º–µ—Ä –∑–∞—Ö–æ–¥—É
        "placeholders": dynamic_fields
    }

    document_blocks.append(block_dict)
    save_current_state(document_blocks, tabview)
