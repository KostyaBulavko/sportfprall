# app.py

import customtkinter as ctk
import tkinter.messagebox as messagebox

from globals import version, name_prog, document_blocks
from state_manager import (
    save_current_state,
    setup_auto_save,
    load_application_state,
    restore_application_state
)
from generation import get_all_placeholders_from_blocks
from events import add_event, remove_tab
from document_block import create_document_fields_block
import koshtorys
from excel_export import export_document_data_to_excel
from generation import generate_documents_word
from template_loader import get_available_templates
from people_selector_widget import PeopleSelectorButton

# === –î–û–î–ê–ù–û –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ò–• –û–ù–û–í–õ–ï–ù–¨ ===
from ctk_update_manager import setup_auto_updates



def get_current_dynamic_fields(tabview):
    """–û—Ç—Ä–∏–º—É—î –¥–∏–Ω–∞–º—ñ—á–Ω—ñ –ø–æ–ª—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞—Ö–æ–¥—É"""
    current_event = tabview.get()
    if not current_event:
        return []

    relevant_blocks = [b for b in document_blocks if b.get("tab_name") == current_event]
    if not relevant_blocks:
        return []

    dynamic_fields = get_all_placeholders_from_blocks(relevant_blocks)
    return dynamic_fields


def launch_main_app():
    global main_app_root, tabview, event_name_entry, update_manager

    ctk.set_appearance_mode("light")
    ctk.set_default_color_theme("green")

    main_app_root = ctk.CTk()
    main_app_root.title(name_prog + version)
    main_app_root.geometry("1200x750")

    update_manager = setup_auto_updates(main_app_root, version)

    # --- –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å ---
    top_controls_frame = ctk.CTkFrame(main_app_root)
    top_controls_frame.pack(pady=10, padx=10, fill="x")

    # Tabview (–≤–∫–ª–∞–¥–∫–∏ –∑–∞—Ö–æ–¥—ñ–≤)
    tabview = ctk.CTkTabview(main_app_root)
    tabview.pack(fill="both", expand=True, padx=10, pady=10)

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É
    saved_state = load_application_state()
    if saved_state:
        restore_application_state(saved_state, tabview, main_app_root)
    else:
        print("[INFO] –ó–∞–ø—É—Å–∫ –∑ —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞")

    # === –ü–ê–ù–ï–õ–¨ –ö–ï–†–£–í–ê–ù–ù–Ø –ó–ê–•–û–î–ê–ú–ò ===
    event_control_frame = ctk.CTkFrame(top_controls_frame)
    event_control_frame.pack(side="left", fill="x", expand=True, padx=(0, 10))

    # –ü—ñ–¥–ø–∞–Ω–µ–ª—å –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞—Ö–æ–¥—É
    event_input_frame = ctk.CTkFrame(event_control_frame, fg_color="transparent")
    event_input_frame.pack(fill="x", pady=(5, 0))

    ctk.CTkLabel(event_input_frame, text="–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∑–∞—Ö–æ–¥–∞–º–∏:",
                 font=("Arial", 12, "bold")).pack(anchor="w", padx=5)

    add_event_frame = ctk.CTkFrame(event_input_frame, fg_color="transparent")
    add_event_frame.pack(fill="x", pady=5)

    event_name_entry = ctk.CTkEntry(add_event_frame, placeholder_text="–ù–∞–∑–≤–∞ –Ω–æ–≤–æ–≥–æ –∑–∞—Ö–æ–¥—É", width=200)
    event_name_entry.pack(side="left", padx=5, fill="x", expand=True)

    def on_add_event_from_entry():
        name = event_name_entry.get().strip()
        if name:
            add_event(name, tabview)
            event_name_entry.delete(0, 'end')
            save_current_state(document_blocks, tabview)
        else:
            messagebox.showwarning("–£–≤–∞–≥–∞", "–ù–∞–∑–≤–∞ –∑–∞—Ö–æ–¥—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é!")

    ctk.CTkButton(add_event_frame, text="‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞—Ö—ñ–¥", width=120,
                  command=on_add_event_from_entry,
                  fg_color="#2E8B57", hover_color="#228B22").pack(side="left", padx=5)

    # –ü—ñ–¥–ø–∞–Ω–µ–ª—å –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞—Ö–æ–¥—É
    delete_event_frame = ctk.CTkFrame(event_input_frame, fg_color="transparent")
    delete_event_frame.pack(fill="x", pady=(5, 5))

    def on_remove_current_event():
        """–í–∏–¥–∞–ª—è—î –ø–æ—Ç–æ—á–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∏–π –∑–∞—Ö—ñ–¥"""
        current_tab = tabview.get()
        if not current_tab:
            messagebox.showwarning("–£–≤–∞–≥–∞", "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞—Ö–æ–¥—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è!")
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –¥–æ–≥–æ–≤–æ—Ä–∏ –≤ —Ü—å–æ–º—É –∑–∞—Ö–æ–¥—ñ
        contracts_count = len([block for block in document_blocks if block.get("tab_name") == current_tab])

        warning_text = f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞—Ö—ñ–¥ '{current_tab}'?"
        if contracts_count > 0:
            warning_text += f"\n\n–£ —Ü—å–æ–º—É –∑–∞—Ö–æ–¥—ñ —î {contracts_count} –¥–æ–≥–æ–≤–æ—Ä—ñ–≤, —è–∫—ñ —Ç–∞–∫–æ–∂ –±—É–¥—É—Ç—å –≤–∏–¥–∞–ª–µ–Ω—ñ!"
        warning_text += "\n\n–¶—é –¥—ñ—é –Ω–µ–º–æ–∂–ª–∏–≤–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏!"

        result = messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è", warning_text)

        if result:
            remove_tab(current_tab, tabview)

    def get_all_events():
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∑–∞—Ö–æ–¥—ñ–≤"""
        try:
            return list(tabview._tab_dict.keys()) if hasattr(tabview, '_tab_dict') else []
        except:
            return []

    def on_remove_selected_event():
        """–í–∏–¥–∞–ª—è—î –æ–±—Ä–∞–Ω–∏–π –∑–∞—Ö—ñ–¥ –∑—ñ —Å–ø–∏—Å–∫—É"""
        all_events = get_all_events()

        if not all_events:
            messagebox.showinfo("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "–ù–µ–º–∞—î –∑–∞—Ö–æ–¥—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è!")
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥—ñ–∞–ª–æ–≥–æ–≤–µ –≤—ñ–∫–Ω–æ –¥–ª—è –≤–∏–±–æ—Ä—É –∑–∞—Ö–æ–¥—É
        dialog = ctk.CTkToplevel(main_app_root)
        dialog.title("–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞—Ö—ñ–¥")
        dialog.geometry("400x300")
        dialog.transient(main_app_root)
        dialog.grab_set()

        # –¶–µ–Ω—Ç—Ä—É—î–º–æ –¥—ñ–∞–ª–æ–≥
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (400 // 2)
        y = (dialog.winfo_screenheight() // 2) - (300 // 2)
        dialog.geometry(f"400x300+{x}+{y}")

        ctk.CTkLabel(dialog, text="–û–±–µ—Ä—ñ—Ç—å –∑–∞—Ö—ñ–¥ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:",
                     font=("Arial", 14, "bold")).pack(pady=10)

        # –°–ø–∏—Å–æ–∫ –∑–∞—Ö–æ–¥—ñ–≤ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ–≥–æ–≤–æ—Ä—ñ–≤
        events_frame = ctk.CTkScrollableFrame(dialog, height=150)
        events_frame.pack(fill="both", expand=True, padx=20, pady=10)

        selected_event = ctk.StringVar()

        for event_name in all_events:
            contracts_count = len([block for block in document_blocks if block.get("tab_name") == event_name])
            event_text = f"{event_name}"
            if contracts_count > 0:
                event_text += f" ({contracts_count} –¥–æ–≥–æ–≤–æ—Ä—ñ–≤)"

            event_radio = ctk.CTkRadioButton(events_frame, text=event_text,
                                             variable=selected_event, value=event_name)
            event_radio.pack(anchor="w", pady=2, padx=10)

        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ctk.CTkFrame(dialog, fg_color="transparent")
        buttons_frame.pack(fill="x", padx=20, pady=10)

        def confirm_delete():
            event_to_delete = selected_event.get()
            if not event_to_delete:
                messagebox.showwarning("–£–≤–∞–≥–∞", "–û–±–µ—Ä—ñ—Ç—å –∑–∞—Ö—ñ–¥ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è!")
                return

            contracts_count = len([block for block in document_blocks if block.get("tab_name") == event_to_delete])

            warning_text = f"–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞—Ö—ñ–¥ '{event_to_delete}'?"
            if contracts_count > 0:
                warning_text += f"\n\n–†–∞–∑–æ–º –∑ {contracts_count} –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏!"

            if messagebox.askyesno("–û—Å—Ç–∞—Ç–æ—á–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", warning_text):
                dialog.destroy()
                remove_tab(event_to_delete, tabview)

        def cancel_delete():
            dialog.destroy()

        ctk.CTkButton(buttons_frame, text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏",
                      command=confirm_delete,
                      fg_color="#DC3545", hover_color="#C82333").pack(side="left", padx=5)

        ctk.CTkButton(buttons_frame, text="–°–∫–∞—Å—É–≤–∞—Ç–∏",
                      command=cancel_delete).pack(side="right", padx=5)

    # –ö–Ω–æ–ø–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    ctk.CTkButton(delete_event_frame, text="üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞—Öi–¥", width=140,
                  command=on_remove_current_event,
                  fg_color="#DC3545", hover_color="#C82333").pack(side="left", padx=5)


    # === –ü–ê–ù–ï–õ–¨ –û–°–ù–û–í–ù–ò–• –§–£–ù–ö–¶–Ü–ô ===
    main_functions_frame = ctk.CTkFrame(top_controls_frame)
    main_functions_frame.pack(side="right", padx=(10, 0))

    # –ü–µ—Ä—à–∏–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    first_row = ctk.CTkFrame(main_functions_frame, fg_color="transparent")
    first_row.pack(pady=(5, 5))

    ctk.CTkButton(first_row, text="üìÑ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥–æ–≥–æ–≤–æ—Ä–∏",
                  command=lambda: generate_documents_word(tabview),
                  width=180).pack(side="left", padx=5)

    ctk.CTkButton(first_row, text="üí∞ –ö–æ—à—Ç–æ—Ä–∏—Å",
                  command=lambda: koshtorys.fill_koshtorys(document_blocks),
                  fg_color="#FF9800", width=120).pack(side="left", padx=5)

    # –î—Ä—É–≥–∏–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    second_row = ctk.CTkFrame(main_functions_frame, fg_color="transparent")
    second_row.pack(pady=5)

    def export_excel_with_dynamic_fields():
        try:
            dynamic_fields = get_current_dynamic_fields(tabview)
            if not dynamic_fields:
                messagebox.showwarning("–£–≤–∞–≥–∞",
                                       "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—ñ–≤ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É. –î–æ–¥–∞–π—Ç–µ —Å–ø–æ—á–∞—Ç–∫—É –¥–æ–≥–æ–≤–æ—Ä–∏ –∑ —à–∞–±–ª–æ–Ω–∞–º–∏.")
                return
            success = export_document_data_to_excel(document_blocks, dynamic_fields)
            if success:
                messagebox.showinfo("–£—Å–ø—ñ—Ö", "Excel —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            else:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ Excel —Ñ–∞–π–ª")
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ Excel: {e}")

    ctk.CTkButton(second_row, text="üì• Excel",
                  command=export_excel_with_dynamic_fields,
                  fg_color="#00BCD4", width=80).pack(side="left", padx=5)

    def check_updates():
        try:
            update_manager.check_updates_manual()
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")

    ctk.CTkButton(second_row, text="üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è",
                  command=check_updates,
                  fg_color="#9C27B0", width=100).pack(side="left", padx=5)

    def show_dynamic_fields():
        try:
            dynamic_fields = get_current_dynamic_fields(tabview)
            if dynamic_fields:
                fields_text = "\n".join([f"‚Ä¢ {field}" for field in dynamic_fields])
                messagebox.showinfo("–ó–Ω–∞–π–¥–µ–Ω—ñ –ø–æ–ª—è", f"–î–∏–Ω–∞–º—ñ—á–Ω—ñ –ø–æ–ª—è –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –∑–∞—Ö–æ–¥—ñ:\n\n{fields_text}")
            else:
                messagebox.showinfo("–ü–æ–ª—è", "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–∏—Ö –ø–æ–ª—ñ–≤. –î–æ–¥–∞–π—Ç–µ –¥–æ–≥–æ–≤–æ—Ä–∏ –∑ —à–∞–±–ª–æ–Ω–∞–º–∏.")
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–ª—ñ–≤: {e}")

    ctk.CTkButton(second_row, text="üîç –ü–æ–ª—è",
                  command=show_dynamic_fields,
                  fg_color="#607D8B", width=80).pack(side="left", padx=5)

    # –¢—Ä–µ—Ç—ñ–π —Ä—è–¥ - –≤–µ—Ä—Å—ñ—è
    third_row = ctk.CTkFrame(main_functions_frame, fg_color="transparent")
    third_row.pack(pady=5)

    people_button = PeopleSelectorButton(third_row)
    people_button.pack(side="left", padx=5)

    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º–æ –≤–µ—Ä—Å—ñ—é –≤ —á–µ—Ç–≤–µ—Ä—Ç–∏–π —Ä—è–¥
    version_frame = ctk.CTkFrame(main_functions_frame, fg_color="transparent")
    version_frame.pack(pady=(5, 5))

    ctk.CTkLabel(version_frame, text=version, text_color="gray", font=("Arial", 12)).pack()


    setup_auto_save(main_app_root, document_blocks, tabview)


    return main_app_root, tabview


# –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω–æ–º –ø—Ä–æ–≥—Ä–∞–º–∏
def manual_save():
    """–†—É—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É"""
    try:
        save_current_state(document_blocks, tabview)
        messagebox.showinfo("–£—Å–ø—ñ—Ö", "–°—Ç–∞–Ω –ø—Ä–æ–≥—Ä–∞–º–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    except Exception as e:
        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç–∞–Ω:\n{e}")


def clear_all_data():
    """–û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö (–∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º)"""
    result = messagebox.askyesno(
        "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
        "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ?\n–¶—é –¥—ñ—é –Ω–µ–º–æ–∂–ª–∏–≤–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏!"
    )

    if result:
        from state_manager import clear_saved_state
        clear_saved_state()
        messagebox.showinfo("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É.")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏
    app_root, app_tabview = launch_main_app()

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å –¥–ª—è –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    main_app_root = app_root
    tabview = app_tabview

    # –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É
    app_root.mainloop()